package com.example.chapter33.unit3;
/**
 * 包装模式：代理模式、装饰模式、适配器模式、桥梁模式和门面模式
 * 它们具有相似的特征：都是通过委托的方式对一个对象或一系列对象（例如门面模式）施行包装，有了包装，设计的系统才更加灵活、稳定，并且极具扩展性。
 * 从实现的角度来看，它们都是代理的一种具体表现形式，我们来看看它们在使用场景上有什么区别。
 *
 * 代理模式主要用在不希望展示一个对象内部细节的场景中，
 * 比如一个远程服务不需要把远程连接的所有细节都暴露给外部模块，通过增加一个代理类，可以很轻松地实现被代理类的功能封装。
 * 此外，代理模式还可以用在一个对象的访问需要限制的场景中，比如AOP。
 *
 * 装饰模式是一种特殊的代理模式，它倡导的是在不改变接口的前提下为对象增强功能，或者动态添加额外职责。
 * 就扩展性而言，它比子类更加灵活，例如在一个已经运行的项目中，可以很轻松地通过增加装饰类来扩展系统的功能。
 *
 * 适配器模式的主要意图是接口转换，把一个对象的接口转换成系统希望的另外一个接口，这里的系统指的不仅仅是一个应用，也可能是某个环境，
 * 比如通过接口转换可以屏蔽外界接口，以免外界接口深入系统内部，从而提高系统的稳定性和可靠性。
 *
 * 桥梁模式是在抽象层产生耦合，解决的是自行扩展的问题，它可以使两个有耦合关系的对象互不影响地扩展，
 * 比如对于使用笔画图这样的需求，可以采用桥梁模式设计成用什么笔（铅笔、毛笔）画什么图（圆形、方形）的方案，至于以后需求的变更，
 * 如增加笔的类型，增加图形等，对该设计来说是小菜一碟。
 *
 * 门面模式是一个粗粒度的封装，它提供一个方便访问子系统的接口，不具有任何的业务逻辑，仅仅是一个访问复杂系统的快速通道，
 * 没有它，子系统照样运行，有了它，只是更方便访问而已。
 */